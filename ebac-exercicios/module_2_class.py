# -*- coding: utf-8 -*-
"""module_2_class.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g7jJSzSq9D0Ld0gI06GxYX0Lzn0yP4jp

<img src="https://raw.githubusercontent.com/andre-marcos-perez/ebac-course-utils/main/media/logo/newebac_logo_black_half.png" alt="ebac-logo">

---

# **Módulo 02** | Python: Estruturas de Dados
Caderno de **Aula**<br> 
Professor [André Perez](https://www.linkedin.com/in/andremarcosperez/)

---

# **Tópicos**

<ol type="1">
  <li>Listas;</li>
  <li>Conjuntos;</li>
  <li>Dicionários.</li>
</ol>

---

# **Aulas**

## 1\. Listas

### **1.1. Motivação**

O aplicativo do seu banco registra toda a sua movimentação financeira. O final do dia, o app consolida o saldo final para que você possa controlar sua vida financeira.
"""

dia_11_saldo_inicial = 1000

dia_11_transacao_1 = 243
dia_11_transacao_2 = -798.58
dia_11_transacao_3 = 427.12
dia_11_transacao_4 = -10.91

dia_11_saldo_final = dia_11_saldo_inicial + dia_11_transacao_1 + \
    dia_11_transacao_2 + dia_11_transacao_3 + dia_11_transacao_4

print(dia_11_saldo_final)

"""Será que exista uma forma melhor de armazenar as transações diárias?

### **1.2. Definição**

Armazenam sequências mutáveis e ordenadas de valores. São do tipo `list`:
"""

usuario_web = ['André Perez', 'andre.perez',
               'andre123', 'andre.perez@gmail.com']

print(usuario_web)
print(type(usuario_web))

idade = 20
saldo_em_conta = 723.15
usuario_loggedin = True

usuario_web = ['André Perez', idade, 'andre.perez', 'andre123',
               'andre.perez@gmail.com', saldo_em_conta, usuario_loggedin]

print(usuario_web)
print(type(usuario_web))

"""### **1.3. Operações**

As operações da estrutura do tipo *list* são:


*   `+` (concatenação).

**Exemplo**: Fabricantes de *hardware* mobile
"""

fabricantes_mobile_china = ['xiaomi', 'huawei']
fabricantes_mobile_eua = ['apple', 'motorola']
fabricantes_mobile = fabricantes_mobile_china + fabricantes_mobile_eua

print(fabricantes_mobile_china)
print(fabricantes_mobile_eua)
print(fabricantes_mobile)

"""Outra operação muito utilizada é a de fatiamento (*slicing*), semelhante ao de *strings*:

Fatiamento fixo:
"""

print(f'0: {fabricantes_mobile[0]}')
print(f'-1: {fabricantes_mobile[-1]}')

"""Fatiamento por intervalo:"""

fabricantes_mobile_china = fabricantes_mobile[0:2]
fabricantes_mobile_eua = fabricantes_mobile[2:len(fabricantes_mobile)]

print('china: ' + str(fabricantes_mobile_china))
print('eua: ' + str(fabricantes_mobile_eua))

"""Podemos adicionar elementos a uma posição específica da lista:"""

print(fabricantes_mobile)

fabricantes_mobile[2] = 'nokia'
print(fabricantes_mobile)

"""### **1.4. Métodos**

São métodos nativos do Python que nos ajudam a trabalhar no dia a dia com listas.
"""

juros = [0.05, 0.07, 0.02, 0.04, 0.08]
print(juros)

# inserir um elemento sem substituir: list.insert(index, val)
juros.insert(0, 0.10)
print(juros)

# inserir um elemento no fim da lista: list.append(val)
juros.append(0.09)
print(juros)

# remover um elemento pelo valor: list.remove(val)
juros.remove(0.1)
print(juros)

# remover um elemento pelo índice: list.pop(val)
terceiro_juros = juros.pop(2)
print(terceiro_juros)

print(juros)

"""### **1.5. Conversão**

Podemos converter alguns tipos de variáveis em listas, como *strings*.
"""

email = 'andre.perez@gmail.com'
caracteres_email = list(email)

print(email)
print(caracteres_email)

"""### **1.6. Revisitando a motivação** """

dia_11_saldo_inicial = 1000

dia_11_transacoes = []

dia_11_transacoes.append(243)
dia_11_transacoes.append(-798.58)
dia_11_transacoes.append(427.12)
dia_11_transacoes.append(-10.91)

print(dia_11_transacoes)

dia_11_saldo_final = dia_11_saldo_inicial + \
    dia_11_transacoes[0] + dia_11_transacoes[1] + \
    dia_11_transacoes[2] + dia_11_transacoes[3]
print(dia_11_saldo_final)

"""## 2\. Conjuntos

### **2.1. Motivação**

Você trabalha como analista de dados de mídias sociais e precisa descobrir todas as *hashtags* que alcançaram o *top trending* do Twitter durante uma semana. Você já conseguiu as *hashtags* por dia da semana:
"""

hashtags_seg = ['#tiago', '#joao', '#bbb']
hashtags_ter = ['#sarah', '#bbb', '#fiuk']
hashtags_qua = ['#gil', '#thelma', '#lourdes']
hashtags_qui = ['#rafa', '#fora', '#danilo']
hashtags_sex = ['#juliete', '#arthur', '#bbb']

"""Um simples concateção de listas fará com que a *hashtag* #bbb, entre outras, apareça mais de uma vez."""

hashtags_semana = hashtags_seg + hashtags_ter + \
    hashtags_qua + hashtags_qui + hashtags_sex
print(hashtags_semana)

"""### **2.2. Definição**

Armazenam sequências imutáveis e desordenadas valores, sem repetição. São do tipo `set`:
"""

frutas = {'banana', 'maca', 'uva', 'uva'}

print(frutas)
print(type(frutas))

"""### **2.3. Operações**

As operações da estrutura do tipo *set* são:


*   `-` (diferença).

**Exemplo**: Países da europa.
"""

norte_europa = {'reino unido', 'suecia', 'russia', 'noruega', 'dinamarca'}
escandinavia = {'noruega', 'dinamarca', 'suecia'}

norte_europa_nao_escandivano = norte_europa - escandinavia
print(norte_europa_nao_escandivano)

escandivano_nao_norte_europa = escandinavia - norte_europa
print(escandivano_nao_norte_europa)

"""### **2.4. Métodos**

São métodos nativos do Python que nos ajudam a trabalhar no dia a dia com conjuntos.
"""

cursos = {'Exatas', 'Humanas', 'Biológicas'}
print(cursos)

# inserir um elemento no conjunto: set.add(val)
cursos.add('Saúde')
print(cursos)

# remover um elemento no conjunto: set.remove(val)
cursos.remove('Saúde')
print(cursos)

"""### **2.5. Conversão**

Podemos converter conjuntos para lista e vice e versa.
"""

times_paulistas = {'São Paulo', 'Palmeiras', 'Corinthians', 'Santos'}

print(times_paulistas)
print(type(times_paulistas))

print(list(times_paulistas))
print(type(list(times_paulistas)))

"""### **2.6. Revisitando a motivação** """

print(hashtags_semana)
print(len(hashtags_semana))

hashtags_semana = list(set(hashtags_seg + hashtags_ter +
                       hashtags_qua + hashtags_qui + hashtags_sex))

print(hashtags_semana)
print(len(hashtags_semana))

"""## 3\. Dicionários

### **3.1. Motivação**

Para se conectar a uma rede wi-fi, você precisa de duas informações: o nome da rede e a senha de acesso. Quando você vai acessar uma nova rede, você encontra uma lista de redes disponíveis:
"""

wifi_disponiveis = ['rede1', 'cnx_cnx', 'uai-fi', 'r3d3']
print(wifi_disponiveis)

"""Você consegue identificar quais são os nome de redes e suas respectivas senhas? Talvez uma `list` não seja a melhor opção para armazenar esse tipo de dado.

### **3.2. Definição**

Armazenam sequências no formato chave-valor. São do tipo `dict`.
"""

brasil = {'capital': 'Brasília', 'idioma': 'Português', 'populacao': 210}

print(brasil)
print(type(brasil))

"""Não é permite chaves duplicadas."""

carro = {
    'marca': 'Volkswagen',
    'modelo': 'Polo',
    'ano': 2021,
    'ano': 2004
}

print(carro)

"""Podemos criar dicionários compostos:"""

cadastro = {
    'andre': {
        'nome': 'Andre Perez',
        'ano_nascimento': 1992,
        'pais': {
            'pai': {
                'nome': '<nome-do-pai> Perez',
                'ano_nascimento': 1971
            },
            'mae': {
                'nome': '<nome-da-mae> Perez',
                'ano_nascimento': 1973
            },
        }
    }
}

print(cadastro)

cadastro['andre']['pais']['mae']['ano_nascimento']

"""### **3.3. Operações** """

credito = {'123': 750, '789': 980}

"""Elementos são acessados pela sua chave."""

score_123 = credito['123']
score_789 = credito['789']

print(score_123)
print(score_789)

"""Elementos são atualizados pela sua chave."""

credito['123'] = 435
print(credito)

"""Para adicionar um novo elemento, basta criar um novo elemento chave-valor:"""

credito['456'] = 1000
print(credito)

"""### **3.4. Métodos**

São métodos nativos do Python que nos ajudam a trabalhar no dia a dia com dicionários.
"""

artigo = dict(
    titulo='Modulo 02 | Python: Estruturas de Dados',
    corpo='Topicos, Aulas, Listas, Conjuntos, Dicionários, ...',
    total_caracteres=1530
)

# adicionar/atualizar um elemento pelo chave-valor: dict.update(dict)
print(artigo)
artigo.update({'total_caracteres': 7850})
print(artigo)

artigo['total_caracteres'] = 7850

# remover um elemento pelo chave: dict.pop(key)
print(artigo)
total_caracteres = artigo.pop('total_caracteres')
print(artigo)

"""### **3.5. Conversão**

Podemos converter as chaves e os items de um dicionário em uma lista.
"""

artigo = dict(
    titulo='Modulo 02 | Python: Estruturas de Dados',
    corpo='Topicos, Aulas, Listas, Conjuntos, Dicionários, ...',
    total_caracteres=1530
)

chaves = list(artigo.keys())

print(chaves)
print(type(chaves))

valores = list(artigo.values())

print(valores)
print(type(valores))

"""### **3.6. Revisitando a motivação** """

wifi_disponiveis = []

rede = {'nome': 'rede1', 'senha': 'cnx_cnx'}
wifi_disponiveis.append(rede)

rede = {'nome': 'uai-fi', 'senha': 'r3d3'}
wifi_disponiveis.append(rede)

print(wifi_disponiveis)
